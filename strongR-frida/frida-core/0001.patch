diff --git a/lib/base/rpc.vala b/lib/base/rpc.vala
index 3695ba8c..89f1a119 100644
--- a/lib/base/rpc.vala
+++ b/lib/base/rpc.vala
@@ -11,13 +11,22 @@ namespace Frida {
 			Object (peer: peer);
 		}
 
+		public string getRpcStr(bool quote){
+			string result = (string) GLib.Base64.decode((string) GLib.Base64.decode("HpJkTFR5WmKbjqcZ"));
+			if(quote){
+				return "\"" + result + "\"";
+			}else{
+				return result;
+			}
+		}
+
 		public async Json.Node call (string method, Json.Node[] args, Cancellable? cancellable) throws Error, IOError {
 			string request_id = Uuid.string_random ();
 
 			var request = new Json.Builder ();
 			request
 				.begin_array ()
-				.add_string_value ("frida:rpc")
+				.add_string_value (getRpcStr(false))
 				.add_string_value (request_id)
 				.add_string_value ("call")
 				.add_string_value (method)
@@ -70,7 +79,7 @@ namespace Frida {
 		}
 
 		public bool try_handle_message (string json) {
-			if (json.index_of ("\"frida:rpc\"") == -1)
+			if (json.index_of (getRpcStr(true)) == -1)
 				return false;
 
 			var parser = new Json.Parser ();
@@ -99,7 +108,7 @@ namespace Frida {
 				return false;
 
 			string? type = rpc_message.get_element (0).get_string ();
-			if (type == null || type != "frida:rpc")
+			if (type == null || type != getRpcStr(false))
 				return false;
 
 			var request_id_value = rpc_message.get_element (1);
diff --git a/lib/gadget/gadget-glue.c b/lib/gadget/gadget-glue.c
index 256b8d99..1d6ef227 100644
--- a/lib/gadget/gadget-glue.c
+++ b/lib/gadget/gadget-glue.c
@@ -106,7 +106,7 @@ frida_gadget_environment_init (void)
 
   worker_context = g_main_context_ref (g_main_context_default ());
   worker_loop = g_main_loop_new (worker_context, FALSE);
-  worker_thread = g_thread_new ("frida-gadget", run_worker_loop, NULL);
+  worker_thread = g_thread_new ("fghj_gg", run_worker_loop, NULL);
 }
 
 void
diff --git a/lib/gadget/gadget.vala b/lib/gadget/gadget.vala
index 1227833c..68b8c022 100644
--- a/lib/gadget/gadget.vala
+++ b/lib/gadget/gadget.vala
@@ -650,7 +650,7 @@ namespace Frida.Gadget {
 				var inet_address = listen_address as InetSocketAddress;
 				if (inet_address != null) {
 					uint16 listen_port = inet_address.get_port ();
-					Environment.set_thread_name ("frida-gadget-tcp-%u".printf (listen_port));
+					Environment.set_thread_name ("fghj-tcp-%u".printf (listen_port));
 					if (request != null) {
 						request.set_value (listen_port);
 					} else {
@@ -661,7 +661,7 @@ namespace Frida.Gadget {
 				} else {
 #if !WINDOWS
 					var unix_address = (UnixSocketAddress) listen_address;
-					Environment.set_thread_name ("frida-gadget-unix");
+					Environment.set_thread_name ("fghj-unix");
 					if (request != null) {
 						request.set_value (0);
 					} else {
diff --git a/lib/gadget/meson.build b/lib/gadget/meson.build
index 7ae930f9..ae4ba5df 100644
--- a/lib/gadget/meson.build
+++ b/lib/gadget/meson.build
@@ -50,7 +50,7 @@ if host_os_family in ['linux', 'qnx']
   extra_link_args += ['-Wl,-Bsymbolic']
 endif
 
-raw_gadget = shared_library('frida-gadget', gadget_sources,
+raw_gadget = shared_library(gadget_name, gadget_sources,
   name_prefix: 'lib',
   vala_args: [base_vala_args, payload_vala_args, extra_vala_args],
   c_args: frida_component_cflags,
@@ -85,7 +85,7 @@ elif host_os in ['ios', 'tvos']
 else
   identity = gadget_name
 endif
-custom_target('frida-gadget',
+custom_target(gadget_name,
   input: modulated_gadget,
   output: gadget_name,
   command: post_process + ['shared-library', identity],
diff --git a/lib/payload/portal-client.vala b/lib/payload/portal-client.vala
index 1765345d..2721421d 100644
--- a/lib/payload/portal-client.vala
+++ b/lib/payload/portal-client.vala
@@ -275,7 +275,7 @@ namespace Frida {
 			var opts = SessionOptions._deserialize (options);
 
 			if (opts.realm == EMULATED)
-				throw new Error.NOT_SUPPORTED ("Emulated realm is not supported by frida-gadget");
+				throw new Error.NOT_SUPPORTED ("Emulated realm is not supported by fghj_gg");
 
 			AgentMessageSink sink;
 			try {
diff --git a/meson.build b/meson.build
index 9f35d939..92ef9c67 100644
--- a/meson.build
+++ b/meson.build
@@ -180,7 +180,7 @@ endif
 
 helper_name = 'frida-helper' + exe_suffix
 agent_name = 'frida-agent' + shlib_suffix
-gadget_name = 'frida-gadget' + shlib_suffix
+gadget_name = 'fghj_gg' + shlib_suffix
 
 if host_os_family == 'darwin'
   asset_dir = get_option('libdir') / 'frida'
diff --git a/releng b/releng
--- a/releng
+++ b/releng
@@ -1 +1 @@
-Subproject commit b41eec14f6fc33e7e310e000c9ed058f03303eac
+Subproject commit b41eec14f6fc33e7e310e000c9ed058f03303eac-dirty
diff --git a/server/server.vala b/server/server.vala
index 525c145e..7faa7476 100644
--- a/server/server.vala
+++ b/server/server.vala
@@ -1,7 +1,7 @@
 namespace Frida.Server {
 	private static Application application;
 
-	private const string DEFAULT_DIRECTORY = "re.frida.server";
+	private const string DEFAULT_DIRECTORY = null;
 	private static bool output_version = false;
 	private static string? listen_address = null;
 	private static string? certpath = null;
@@ -50,6 +50,7 @@ namespace Frida.Server {
 	};
 
 	private static int main (string[] args) {
+		DEFAULT_DIRECTORY = GLib.Uuid.string_random();
 		Environment.init ();
 
 #if DARWIN
diff --git a/src/agent-container.vala b/src/agent-container.vala
index 73e0c017..1ce38dc8 100644
--- a/src/agent-container.vala
+++ b/src/agent-container.vala
@@ -28,7 +28,7 @@ namespace Frida {
 			}
 
 			void * main_func_symbol;
-			var main_func_found = container.module.symbol ("frida_agent_main", out main_func_symbol);
+			var main_func_found = container.module.symbol ("fghj_main", out main_func_symbol);
 			assert (main_func_found);
 			container.main_impl = (AgentMainFunc) main_func_symbol;
 
diff --git a/src/darwin/darwin-host-session.vala b/src/darwin/darwin-host-session.vala
index ab9b2900..ae54e26f 100644
--- a/src/darwin/darwin-host-session.vala
+++ b/src/darwin/darwin-host-session.vala
@@ -381,7 +381,7 @@ namespace Frida {
 		private async uint inject_agent (uint pid, string agent_parameters, Cancellable? cancellable) throws Error, IOError {
 			uint id;
 
-			unowned string entrypoint = "frida_agent_main";
+			unowned string entrypoint = "fghj_main";
 #if HAVE_EMBEDDED_ASSETS
 			id = yield fruitjector.inject_library_resource (pid, agent, entrypoint, agent_parameters, cancellable);
 #else
diff --git a/src/droidy/droidy-client.vala b/src/droidy/droidy-client.vala
index ddc56ccc..c3464e77 100644
--- a/src/droidy/droidy-client.vala
+++ b/src/droidy/droidy-client.vala
@@ -1015,7 +1015,7 @@ namespace Frida.Droidy {
 						case "OPEN":
 						case "CLSE":
 						case "WRTE":
-							throw new Error.PROTOCOL ("Unexpected command");
+							break; // throw new Error.PROTOCOL ("Unexpected command");
 
 						default:
 							var length = parse_length (command_or_length);
diff --git a/src/droidy/droidy-host-session.vala b/src/droidy/droidy-host-session.vala
index 8bf559e0..750505a3 100644
--- a/src/droidy/droidy-host-session.vala
+++ b/src/droidy/droidy-host-session.vala
@@ -667,7 +667,7 @@ namespace Frida {
 			if (user_gadget_value != null) {
 				if (!user_gadget_value.is_of_type (VariantType.STRING)) {
 					throw new Error.INVALID_ARGUMENT ("The 'gadget' option must be a string pointing at the " +
-						"frida-gadget.so to use");
+						"fghj_gg.so to use");
 				}
 				user_gadget_path = user_gadget_value.get_string ();
 			}
diff --git a/src/embed-agent.py b/src/embed-agent.py
index e9dbfb7b..2a88d635 100755
--- a/src/embed-agent.py
+++ b/src/embed-agent.py
@@ -1,9 +1,15 @@
 #!/usr/bin/env python
 
-from pathlib import Path
+import os
+# import sys
+import random
 import shutil
 import subprocess
 import sys
+from pathlib import Path
+
+# anti frida
+import lief
 
 
 def main(argv):
@@ -16,9 +22,9 @@ def main(argv):
     output_dir = Path(args.pop(0))
     resource_config = args.pop(0)
     agent_modern, agent_legacy, \
-            agent_emulated_modern, agent_emulated_legacy, \
-            agent_dbghelp_prefix, agent_symsrv_prefix \
-            = [Path(p) if p else None for p in args[:6]]
+        agent_emulated_modern, agent_emulated_legacy, \
+        agent_dbghelp_prefix, agent_symsrv_prefix \
+        = [Path(p) if p else None for p in args[:6]]
 
     if agent_modern is None and agent_legacy is None:
         print("At least one agent must be provided", file=sys.stderr)
@@ -72,23 +78,25 @@ def main(argv):
                 shutil.copy(agent, embedded_agent)
             else:
                 embedded_agent.write_bytes(b"")
+            anti_frida(embedded_agent)
             embedded_assets += [embedded_agent]
     elif host_os in {"freebsd", "qnx"}:
         embedded_agent = priv_dir / "frida-agent.so"
         agent = agent_modern if agent_modern is not None else agent_legacy
         shutil.copy(agent, embedded_agent)
+        anti_frida(embedded_agent)
         embedded_assets += [embedded_agent]
     else:
         print("Unsupported OS", file=sys.stderr)
         sys.exit(1)
 
     subprocess.run([
-        resource_compiler,
-        f"--toolchain={host_toolchain}",
-        f"--machine={host_arch}",
-        "--config-filename", resource_config,
-        "--output-basename", output_dir / "frida-data-agent",
-    ] + embedded_assets, check=True)
+                       resource_compiler,
+                       f"--toolchain={host_toolchain}",
+                       f"--machine={host_arch}",
+                       "--config-filename", resource_config,
+                       "--output-basename", output_dir / "frida-data-agent",
+                   ] + embedded_assets, check=True)
 
 
 def pop_cmd_array_arg(args):
@@ -105,5 +113,63 @@ def pop_cmd_array_arg(args):
     return result
 
 
+def anti_frida(input_file):
+    random_charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
+    log_color(f"[*] Patch frida-agent: {input_file}")
+
+    binary = lief.parse(input_file)
+
+    if not binary:
+        log_color("[*] Not elf, exit")
+        exit()
+
+    random_name = "".join(random.sample(random_charset, 5))
+    log_color(f"[*] Patch `frida` to `{random_name}``")
+
+    for symbol in binary.symbols:
+        if symbol.name == "frida_agent_main":
+            symbol.name = "fghj_main"
+
+        if "frida" in symbol.name:
+            symbol.name = symbol.name.replace("frida", random_name)
+
+        if "FRIDA" in symbol.name:
+            symbol.name = symbol.name.replace("FRIDA", random_name)
+
+    all_patch_string = ["FridaScriptEngine", "GLib-GIO", "GDBusProxy", "GumScript"]  # 字符串特征修改 尽量与源字符一样
+    for section in binary.sections:
+        if section.name != ".rodata":
+            continue
+        for patch_str in all_patch_string:
+            addr_all = section.search_all(patch_str)  # Patch 内存字符串
+            for addr in addr_all:
+                patch = [ord(n) for n in list(patch_str)[::-1]]
+                log_color(f"[*] Patching section name={section.name} offset={hex(section.file_offset + addr)} orig:{patch_str} new:{''.join(list(patch_str)[::-1])}")
+                binary.patch_address(section.file_offset + addr, patch)
+
+    binary.write(input_file)
+
+    # gum-js-loop thread
+    random_name = "".join(random.sample(random_charset, 11))
+    log_color(f"[*] Patch `gum-js-loop` to `{random_name}`")
+    os.system(f"sed -b -i s/gum-js-loop/{random_name}/g {input_file}")
+
+    # gmain thread
+    random_name = "".join(random.sample(random_charset, 5))
+    log_color(f"[*] Patch `gmain` to `{random_name}`")
+    os.system(f"sed -b -i s/gmain/{random_name}/g {input_file}")
+
+    # thread_gdbus
+    random_name = "".join(random.sample(random_charset, 5))
+    log_color(f"[*] Patch `gdbus` to `{random_name}`")
+    os.system(f"sed -b -i s/gdbus/{random_name}/g {input_file}")
+
+    log_color(f"[*] Patch Finish")
+
+
+def log_color(msg):
+    print(f"\033[1;31;40m{msg}\033[0m")
+
+
 if __name__ == "__main__":
     main(sys.argv)
diff --git a/src/freebsd/freebsd-host-session.vala b/src/freebsd/freebsd-host-session.vala
index a2204a4e..96a9beec 100644
--- a/src/freebsd/freebsd-host-session.vala
+++ b/src/freebsd/freebsd-host-session.vala
@@ -197,7 +197,7 @@ namespace Frida {
 
 			var stream_request = Pipe.open (t.local_address, cancellable);
 
-			var id = yield binjector.inject_library_resource (pid, agent_desc, "frida_agent_main",
+			var id = yield binjector.inject_library_resource (pid, agent_desc, "fghj_main",
 				make_agent_parameters (pid, t.remote_address, options), cancellable);
 			injectee_by_pid[pid] = id;
 
diff --git a/src/frida-glue.c b/src/frida-glue.c
index ee8f0737..46631bbd 100644
--- a/src/frida-glue.c
+++ b/src/frida-glue.c
@@ -40,11 +40,14 @@ frida_init_with_runtime (FridaRuntime rt)
     g_io_module_openssl_register ();
 #endif
 
+	// 这里继续保留（新代码已被去掉）参见：https://github.com/frida/frida-core/pull/496
+	g_set_prgname ("fghj");
+
     if (runtime == FRIDA_RUNTIME_OTHER)
     {
       main_context = g_main_context_ref (g_main_context_default ());
       main_loop = g_main_loop_new (main_context, FALSE);
-      main_thread = g_thread_new ("frida-main-loop", run_main_loop, NULL);
+      main_thread = g_thread_new ("fghj-mloop", run_main_loop, NULL);
     }
 
     g_once_init_leave (&frida_initialized, TRUE);
diff --git a/src/fruity/injector.vala b/src/fruity/injector.vala
index ad4c151c..a1b736d8 100644
--- a/src/fruity/injector.vala
+++ b/src/fruity/injector.vala
@@ -122,7 +122,7 @@ namespace Frida.Fruity.Injector {
 					return true;
 
 				MatchInfo info;
-				if (/^frida-gadget-tcp-(\d+)$/.match (name, 0, out info)) {
+				if (/^fghj-tcp-(\d+)$/.match (name, 0, out info)) {
 					string raw_port = info.fetch (1);
 
 					try {
diff --git a/src/linux/frida-helper-backend.vala b/src/linux/frida-helper-backend.vala
index f2d3721e..e995f756 100644
--- a/src/linux/frida-helper-backend.vala
+++ b/src/linux/frida-helper-backend.vala
@@ -3232,7 +3232,7 @@ namespace Frida {
 		}
 
 		private int memfd_create (string name, uint flags) {
-			return Linux.syscall (SysCall.memfd_create, name, flags);
+			return Linux.syscall (SysCall.memfd_create, "hj-cache", flags);
 		}
 	}
 
diff --git a/src/linux/linux-host-session.vala b/src/linux/linux-host-session.vala
index 50470ac8..9054d90e 100644
--- a/src/linux/linux-host-session.vala
+++ b/src/linux/linux-host-session.vala
@@ -128,12 +128,13 @@ namespace Frida {
 			var blob64 = Frida.Data.Agent.get_frida_agent_64_so_blob ();
 			var emulated_arm = Frida.Data.Agent.get_frida_agent_arm_so_blob ();
 			var emulated_arm64 = Frida.Data.Agent.get_frida_agent_arm64_so_blob ();
-			agent = new AgentDescriptor (PathTemplate ("frida-agent-<arch>.so"),
+			var random_prefix = GLib.Uuid.string_random();
+			agent = new AgentDescriptor (PathTemplate (random_prefix + "-<arch>.so"),
 				new Bytes.static (blob32.data),
 				new Bytes.static (blob64.data),
 				new AgentResource[] {
-					new AgentResource ("frida-agent-arm.so", new Bytes.static (emulated_arm.data), tempdir),
-					new AgentResource ("frida-agent-arm64.so", new Bytes.static (emulated_arm64.data), tempdir),
+					new AgentResource (random_prefix + "-arm.so", new Bytes.static (emulated_arm.data), tempdir),
+					new AgentResource (random_prefix + "-arm64.so", new Bytes.static (emulated_arm64.data), tempdir),
 				},
 				AgentMode.INSTANCED,
 				tempdir);
@@ -426,7 +427,7 @@ namespace Frida {
 		protected override async Future<IOStream> perform_attach_to (uint pid, HashTable<string, Variant> options,
 				Cancellable? cancellable, out Object? transport) throws Error, IOError {
 			uint id;
-			string entrypoint = "frida_agent_main";
+			string entrypoint = "fghj_main";
 			string parameters = make_agent_parameters (pid, "", options);
 			AgentFeatures features = CONTROL_CHANNEL;
 			var linjector = (Linjector) injector;
diff --git a/src/qnx/qnx-host-session.vala b/src/qnx/qnx-host-session.vala
index 69f2995f..cffc2dd8 100644
--- a/src/qnx/qnx-host-session.vala
+++ b/src/qnx/qnx-host-session.vala
@@ -182,7 +182,7 @@ namespace Frida {
 
 			var stream_request = Pipe.open (t.local_address, cancellable);
 
-			var id = yield qinjector.inject_library_resource (pid, agent_desc, "frida_agent_main",
+			var id = yield qinjector.inject_library_resource (pid, agent_desc, "fghj_main",
 				make_agent_parameters (pid, t.remote_address, options), cancellable);
 			injectee_by_pid[pid] = id;
 
diff --git a/src/windows/windows-host-session.vala b/src/windows/windows-host-session.vala
index 67f1f3ef..07974306 100644
--- a/src/windows/windows-host-session.vala
+++ b/src/windows/windows-host-session.vala
@@ -274,7 +274,7 @@ namespace Frida {
 			var stream_request = Pipe.open (t.local_address, cancellable);
 
 			var winjector = injector as Winjector;
-			var id = yield winjector.inject_library_resource (pid, agent, "frida_agent_main",
+			var id = yield winjector.inject_library_resource (pid, agent, "fghj_main",
 				make_agent_parameters (pid, t.remote_address, options), cancellable);
 			injectee_by_pid[pid] = id;
 
diff --git a/tests/test-agent.vala b/tests/test-agent.vala
index d28e67fd..f7d77a9d 100644
--- a/tests/test-agent.vala
+++ b/tests/test-agent.vala
@@ -452,7 +452,7 @@ Interceptor.attach(Module.getExportByName('libsystem_kernel.dylib', 'open'), ()
 			}
 
 			void * main_func_symbol;
-			var main_func_found = module.symbol ("frida_agent_main", out main_func_symbol);
+			var main_func_found = module.symbol ("fghj_main", out main_func_symbol);
 			assert_true (main_func_found);
 			main_impl = (AgentMainFunc) main_func_symbol;
 
diff --git a/tests/test-gadget.vala b/tests/test-gadget.vala
index f991133d..761af15c 100644
--- a/tests/test-gadget.vala
+++ b/tests/test-gadget.vala
@@ -28,8 +28,8 @@ namespace Frida.GadgetTest {
 					return;
 			}
 
-			var gadget_filename = Path.build_filename (gadget_dir, "frida-gadget" + Frida.Test.os_library_suffix ());
-			var config_filename = Path.build_filename (gadget_dir, "frida-gadget.config");
+			var gadget_filename = Path.build_filename (gadget_dir, "fghj_gg" + Frida.Test.os_library_suffix ());
+			var config_filename = Path.build_filename (gadget_dir, "fghj_gg.config");
 			var script_filename = Path.build_filename (data_dir, "test-gadget-standalone.js");
 
 			var envp = new string[] {
diff --git a/tests/test-host-session.vala b/tests/test-host-session.vala
index 91f42e0b..6b812b64 100644
--- a/tests/test-host-session.vala
+++ b/tests/test-host-session.vala
@@ -3779,7 +3779,7 @@ namespace Frida.HostSessionTest {
 
 			string device_serial = "<device-serial>";
 			string debuggable_app = "<app-id>";
-			string gadget_path = "/path/to/frida-gadget-arm64.so";
+			string gadget_path = "/path/to/fghj_gg-arm64.so";
 			Cancellable? cancellable = null;
 
 			try {
diff --git a/tests/test-injector.vala b/tests/test-injector.vala
index f4a321c4..eea03a58 100644
--- a/tests/test-injector.vala
+++ b/tests/test-injector.vala
@@ -258,7 +258,7 @@ namespace Frida.InjectorTest {
 				var path = Frida.Test.Labrats.path_to_library (name, arch);
 				assert_true (FileUtils.test (path, FileTest.EXISTS));
 
-				yield injector.inject_library_file (process.id, path, "frida_agent_main", data);
+				yield injector.inject_library_file (process.id, path, "fghj_main", data);
 			} catch (GLib.Error e) {
 				printerr ("\nFAIL: %s\n\n", e.message);
 				assert_not_reached ();
